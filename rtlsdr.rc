extern mod extra;

use std::num;
use extra::complex;
use extra::time;

mod kissfft;
mod video;
mod rtlsdr;
mod pa;

fn asRe ( d: ~[f32] ) -> ~[complex::Complex32] { return d.iter().transform(|&x| {complex::Cmplx {re: x, im: 0.0}}).collect::<~[complex::Complex32]>();}
fn asF32 ( d: ~[complex::Complex32] ) -> ~[f32] { return d.iter().transform(|&x| {if (num::abs(x.im) < 0.001) { x.re } else { let (m,p) = x.to_polar(); m*num::signum(p) }}).collect::<~[f32]>(); }
fn asF64 ( d: ~[f32] ) -> ~[f64] { return d.iter().transform(|&x| x as f64).collect(); }
fn main() {
	let devHandle = rtlsdr::openDevice(0);
	rtlsdr::setSampleRate(devHandle, 881000);
	rtlsdr::clearBuffer(devHandle);
	rtlsdr::setGainAuto(devHandle);
	rtlsdr::setFrequency(devHandle, 87900000);
	let (keystrokePort, videoChan) = video::spawnVectorVisualSink();
	let pi: f32 = num::atan2(1f32,1f32) * 4f32;
	let co = pa::buildPASinkBlock(44100);
	// len 511 complex-coefficiented, real-valued block filter, padded to 8192
	let filter: ~[f32] = ~[-9.977736e-05, -0.00012081869, 4.5971351e-06, 6.2203842e-05, -4.8155471e-05, -0.0001388876, -5.3449767e-05, 6.3481311e-05, 1.0139966e-05, -0.00012523751, -0.00011069905, 3.1706415e-05, 5.7877463e-05, -8.1410719e-05, -0.00014982354, -2.7078981e-05, 7.8722223e-05, -1.7900404e-05, -0.00015661963, -9.8233926e-05, 6.1768857e-05, 4.7135862e-05, -0.00012455709, -0.00016101332, 5.8090818e-06, 9.1642782e-05, -5.8400525e-05, -0.00019356995, -7.8096309e-05, 9.5741103e-05, 2.4671861e-05, -0.00017979353, -0.00016730753, 4.8882313e-05, 9.7821146e-05, -0.00011620728, -0.00023252271, -4.4172157e-05, 0.00013153431, -1.6341452e-05, -0.00024651783, -0.00016123113, 0.00010357361, 8.993064e-05, -0.00019455473, -0.00026645779, 8.9319465e-06, 0.00016337418, -8.28837e-05, -0.00032032063, -0.00013411487, 0.00016775906, 5.8544982e-05, -0.00029350849, -0.00028531559, 8.4192761e-05, 0.00018177628, -0.00018036726, -0.00039250971, -7.772565e-05, 0.00023484028, -6.4444157e-06, -0.00040865791, -0.00027709827, 0.00018054189, 0.00017423414, -0.00031079652, -0.00045032482, 1.3795876e-05, 0.00029344394, -0.00011393549, -0.00053030677, -0.00022958756, 0.0002915771, 0.00012662227, -0.00047108016, -0.00047791883, 0.00014194657, 0.00032788323, -0.00026946652, -0.00064336776, -0.00013251157, 0.00040486496, 2.5213247e-05, -0.00065177772, -0.00045807872, 0.00030211124, 0.0003194329, -0.00047308989, -0.00072808791, 2.0085674e-05, 0.00050202926, -0.00014088757, -0.00083652866, -0.00037455498, 0.00048233851, 0.00024836243, -0.00071757205, -0.00076163007, 0.00022757113, 0.00055973139, -0.0003771623, -0.0010023449, -0.00021477368, 0.00066288444, 9.6565091e-05, -0.00098720682, -0.00072042481, 0.00048085873, 0.00055154075, -0.00068127102, -0.0011208483, 2.7364036e-05, 0.00081668643, -0.00014947043, -0.0012574742, -0.00058309978, 0.00076123915, 0.00045057636, -0.0010411303, -0.0011604205, 0.00034892428, 0.00091082032, -0.00049566262, -0.0014956822, -0.00033370435, 0.0010401165, 0.00023269416, -0.0014337546, -0.0010891078, 0.00073594117, 0.0009088699, -0.00093765126, -0.0016626072, 3.5105346e-05, 0.0012797572, -0.00012009144, -0.0018250454, -0.00087801996, 0.0011622322, 0.00077400636, -0.0014587336, -0.0017150117, 0.00051926641, 0.0014350138, -0.00061630894, -0.0021705856, -0.0005048702, 0.001589174, 0.00047246204, -0.0020286497, -0.0016087712, 0.0011011938, 0.001455828, -0.0012522114, -0.0024173225, 4.2737251e-05, 0.0019664175, -2.301785e-05, -0.0026033032, -0.0013022018, 0.0017485413, 0.0012901317, -0.0020097352, -0.0025058177, 0.0007646695, 0.0022333066, -0.00073022844, -0.0031252853, -0.00075903506, 0.0024138468, 0.00088655466, -0.0028554082, -0.0023724674, 0.0016466294, 0.002320444, -0.0016556055, -0.0035247556, 4.9686598e-05, 0.0030347819, 0.00019604652, -0.0037401591, -0.0019506868, 0.0026597823, 0.0021503628, -0.0027939973, -0.0037196996, 0.0011458179, 0.0035342281, -0.00082900521, -0.0045996243, -0.0011692939, 0.0037617809, 0.0016353125, -0.0041309581, -0.00361355, 0.0025481277, 0.0038184384, -0.0022407956, -0.0053538471, 5.5425877e-05, 0.0048991758, 0.00066795823, -0.005649115, -0.0030857064, 0.004283682, 0.0037692166, -0.0041131414, -0.0059036561, 0.0018422449, 0.0060110493, -0.00090531912, -0.0073424159, -0.001963529, 0.0064158533, 0.0032193155, -0.006585543, -0.0061162473, 0.004405587, 0.007033566, -0.0033590782, -0.0092500551, 5.9516209e-05, 0.0091186753, 0.0018761669, -0.009988022, -0.0057748817, 0.0082370853, 0.0079050288, -0.0073253512, -0.011556258, 0.0036993935, 0.012920377, -0.00095350249, -0.015284379, -0.0043788739, 0.014804221, 0.0085709561, -0.014787029, -0.015011339, 0.011359689, 0.019871576, -0.007799617, -0.026497815, 6.1643317e-05, 0.031013755, 0.008988685, -0.036776125, -0.024560826, 0.03992549, 0.047277756, -0.043885466, -0.096723117, 0.04487364, 0.31453109, 0.45357549, 0.31453109, 0.04487364, -0.096723117, -0.043885466, 0.047277756, 0.03992549, -0.024560826, -0.036776125, 0.008988685, 0.031013755, 6.1643317e-05, -0.026497815, -0.007799617, 0.019871576, 0.011359689, -0.015011339, -0.014787029, 0.0085709561, 0.014804221, -0.0043788739, -0.015284379, -0.00095350249, 0.012920377, 0.0036993935, -0.011556258, -0.0073253512, 0.0079050288, 0.0082370853, -0.0057748817, -0.009988022, 0.0018761669, 0.0091186753, 5.9516209e-05, -0.0092500551, -0.0033590782, 0.007033566, 0.004405587, -0.0061162473, -0.006585543, 0.0032193155, 0.0064158533, -0.001963529, -0.0073424159, -0.00090531912, 0.0060110493, 0.0018422449, -0.0059036561, -0.0041131414, 0.0037692166, 0.004283682, -0.0030857064, -0.005649115, 0.00066795823, 0.0048991758, 5.5425877e-05, -0.0053538471, -0.0022407956, 0.0038184384, 0.0025481277, -0.00361355, -0.0041309581, 0.0016353125, 0.0037617809, -0.0011692939, -0.0045996243, -0.00082900521, 0.0035342281, 0.0011458179, -0.0037196996, -0.0027939973, 0.0021503628, 0.0026597823, -0.0019506868, -0.0037401591, 0.00019604652, 0.0030347819, 4.9686598e-05, -0.0035247556, -0.0016556055, 0.002320444, 0.0016466294, -0.0023724674, -0.0028554082, 0.00088655466, 0.0024138468, -0.00075903506, -0.0031252853, -0.00073022844, 0.0022333066, 0.0007646695, -0.0025058177, -0.0020097352, 0.0012901317, 0.0017485413, -0.0013022018, -0.0026033032, -2.301785e-05, 0.0019664175, 4.2737251e-05, -0.0024173225, -0.0012522114, 0.001455828, 0.0011011938, -0.0016087712, -0.0020286497, 0.00047246204, 0.001589174, -0.0005048702, -0.0021705856, -0.00061630894, 0.0014350138, 0.00051926641, -0.0017150117, -0.0014587336, 0.00077400636, 0.0011622322, -0.00087801996, -0.0018250454, -0.00012009144, 0.0012797572, 3.5105346e-05, -0.0016626072, -0.00093765126, 0.0009088699, 0.00073594117, -0.0010891078, -0.0014337546, 0.00023269416, 0.0010401165, -0.00033370435, -0.0014956822, -0.00049566262, 0.00091082032, 0.00034892428, -0.0011604205, -0.0010411303, 0.00045057636, 0.00076123915, -0.00058309978, -0.0012574742, -0.00014947043, 0.00081668643, 2.7364036e-05, -0.0011208483, -0.00068127102, 0.00055154075, 0.00048085873, -0.00072042481, -0.00098720682, 9.6565091e-05, 0.00066288444, -0.00021477368, -0.0010023449, -0.0003771623, 0.00055973139, 0.00022757113, -0.00076163007, -0.00071757205, 0.00024836243, 0.00048233851, -0.00037455498, -0.00083652866, -0.00014088757, 0.00050202926, 2.0085674e-05, -0.00072808791, -0.00047308989, 0.0003194329, 0.00030211124, -0.00045807872, -0.00065177772, 2.5213247e-05, 0.00040486496, -0.00013251157, -0.00064336776, -0.00026946652, 0.00032788323, 0.00014194657, -0.00047791883, -0.00047108016, 0.00012662227, 0.0002915771, -0.00022958756, -0.00053030677, -0.00011393549, 0.00029344394, 1.3795876e-05, -0.00045032482, -0.00031079652, 0.00017423414, 0.00018054189, -0.00027709827, -0.00040865791, -6.4444157e-06, 0.00023484028, -7.772565e-05, -0.00039250971, -0.00018036726, 0.00018177628, 8.4192761e-05, -0.00028531559, -0.00029350849, 5.8544982e-05, 0.00016775906, -0.00013411487, -0.00032032063, -8.28837e-05, 0.00016337418, 8.9319465e-06, -0.00026645779, -0.00019455473, 8.993064e-05, 0.00010357361, -0.00016123113, -0.00024651783, -1.6341452e-05, 0.00013153431, -4.4172157e-05, -0.00023252271, -0.00011620728, 9.7821146e-05, 4.8882313e-05, -0.00016730753, -0.00017979353, 2.4671861e-05, 9.5741103e-05, -7.8096309e-05, -0.00019356995, -5.8400525e-05, 9.1642782e-05, 5.8090818e-06, -0.00016101332, -0.00012455709, 4.7135862e-05, 6.1768857e-05, -9.8233926e-05, -0.00015661963, -1.7900404e-05, 7.8722223e-05, -2.7078981e-05, -0.00014982354, -8.1410719e-05, 5.7877463e-05, 3.1706415e-05, -0.00011069905, -0.00012523751, 1.0139966e-05, 6.3481311e-05, -5.3449767e-05, -0.0001388876, -4.8155471e-05, 6.2203842e-05, 4.5971351e-06, -0.00012081869, -9.977736e-05];
	let paddedFilter: ~[f32] = ~[0.0f32, ..3840] + filter + ~[0.0f32, ..3841];
	let filterFFTd: ~[complex::Complex32] = kissfft::FFT(asRe(paddedFilter));
	let pdata = rtlsdr::readAsync(devHandle);
	loop {
		let start = time::precise_time_ns();
		// 8192-512 \pm 1 complex-typed samples
		let mut samples: ~[complex::Complex32] = ~[];
		loop {
			samples = samples + rtlsdr::dataToSamples(pdata.recv());
			if (samples.len() == (512*15)) {break};
		}
		// phase of complex numbers
		let phase: ~[f32] = samples.iter().transform(|&x| num::atan2(x.im, x.re)).collect();
		let dpdt: ~[f32] = phase.window_iter(2).transform(|x| {
			let mut dx = x[0]-x[1];
			if (dx < -pi) {dx = dx + 2f32*pi};
			if (dx > pi) {dx = dx - 2f32*pi};
			dx}
			).collect::<~[f32]>();
		//videoChan.send(dpdt.clone());
		// 15 * 512 = 7679
		let paddedData = asRe(~[0.0f32, ..256]) + asRe(dpdt) + asRe(~[0.0f32, ..257]);
		// multiply DFT'd filter coefficients by DFT'd data - implement overlap-scrap fast convolution
		// - http://www.dspguide.com/ch12/1.htm
		// - https://en.wikipedia.org/wiki/Overlap%E2%80%93add_method
		// - http://www.cs.princeton.edu/courses/archive/spr05/cos423/lectures/05fft.pdf
		let datafft = kissfft::FFT(paddedData);
		let convolved: ~[complex::Complex32] = datafft.iter().zip(filterFFTd.iter()).transform(|(&x, &y)| {x*y}).collect();
		let filtered: ~[f32] = asF32(kissfft::iFFT(convolved));
		let trimmed: ~[f32] = filtered.iter().enumerate().filter(|&(x, &y)| (256<x)  && (x<=((8192/2)-256))).transform(|(x, &y)| y).collect();
		// too-clever downsampling to ensure consistent 44.1k sample rate 
		let samples = (time::precise_time_ns() - start) as f32 * 44.1e-6;
		let len = trimmed.len() as f32;
		let downsampleFactor = samples/len;
		let downsampled: ~[f32] = trimmed.iter().enumerate().filter(|&(x, &y)|
			((x as f32*downsampleFactor) - (x as f32*downsampleFactor).floor()) < downsampleFactor
			).transform(|(x, &y)| y).collect();
		videoChan.send(downsampled.clone());
		co.send(downsampled);
	}
}
