#[link(name = "usb", vers = "0.1", author = "Ian Daniher")];

extern mod extra;

use extra::uv_global_loop;
use extra::timer;
use extra::time;

mod rtlsdr;

fn main() {
    println(fmt!("deviceCount: %?", rtlsdr::getDeviceCount()));
	let devHandle = rtlsdr::openDevice(0);
    println(fmt!("deviceStructAddr: %?", devHandle));
    println(fmt!("deviceString: %?", rtlsdr::getDeviceName(0)));
	println(fmt!("set sample rate: 2.048e6 - %?", rtlsdr::setSampleRate(devHandle, 2048000)));
	println(fmt!("buffer cleared: %?", rtlsdr::clearBuffer(devHandle)));
	println(fmt!("frequency set. %?", rtlsdr::setFrequency(devHandle, 100000000)));
	println(fmt!("tuner gain set: %?", rtlsdr::setGainAuto(devHandle)));
	println(fmt!("readSync: %?", rtlsdr::readSync(devHandle, 512)));
	let p = rtlsdr::readAsync(devHandle);	
	let data = p.recv();
	let b: u64 = time::precise_time_ns();
	let samples = rtlsdr::dataToSamples(data);
	let a: u64 = time::precise_time_ns();
	println(fmt!("readAsync: %?", samples));
	println(fmt!("microseconds to map data: %?", (a-b)/1000));
	rtlsdr::stopAsync(devHandle);
	rtlsdr::close(devHandle);
}
