extern mod extra;

use std::num;
use extra::complex;

mod kissfft;
mod video;
mod rtlsdr;
mod pa;

fn asRe ( d: ~[f32] ) -> ~[complex::Complex32] { return d.iter().transform(|&x| {complex::Cmplx {re: x, im: 0.0}}).collect::<~[complex::Complex32]>();}
fn asF32 ( d: ~[complex::Complex32] ) -> ~[f32] { return d.iter().transform(|&x| {if (num::abs(x.im) < 0.001) { x.re } else { let (m,p) = x.to_polar(); m*num::signum(p) }}).collect::<~[f32]>(); }
fn asF64 ( d: ~[f32] ) -> ~[f64] { return d.iter().transform(|&x| x as f64).collect(); }
fn main() {
	let devHandle = rtlsdr::openDevice(0);
	rtlsdr::setSampleRate(devHandle, 800000);
	rtlsdr::clearBuffer(devHandle);
	rtlsdr::setGainAuto(devHandle);
	rtlsdr::setFrequency(devHandle, 87900000);
	let (keystrokePort, videoChan) = video::spawnVectorVisualSink();
	let pi: f32 = num::atan2(1f32,1f32) * 4f32;
	let co = pa::buildPASinkBlock(44100);
	// len 511 complex-coefficiented, real-valued block filter, padded to 8192
	let filter: ~[f32] = ~[-8.4105435e-05, -2.5306228e-05, 1.1403496e-05, 1.1691747e-05, -2.5117404e-05, -8.5616448e-05, -0.00014719651, -0.00018648176, -0.00018820037, -0.00015115608, -8.8987101e-05, -2.530922e-05, 1.5053518e-05, 1.5527503e-05, -2.5634379e-05, -9.4243442e-05, -0.00016512309, -0.00021142243, -0.00021488621, -0.00017318674, -0.0001014029, -2.6858059e-05, 2.0958978e-05, 2.1710524e-05, -2.7542865e-05, -0.00011047409, -0.00019699617, -0.0002543396, -0.00025966347, -0.00020938492, -0.0001214567, -2.9378725e-05, 3.0123192e-05, 3.1263364e-05, -3.0216939e-05, -0.0001343414, -0.00024351435, -0.00031634339, -0.00032363387, -0.00026041703, -0.00014910979, -3.2119558e-05, 4.3750562e-05, 4.5411663e-05, -3.2848995e-05, -0.00016573443, -0.00030527244, -0.00039846692, -0.00040782389, -0.00032684917, -0.00018417882, -3.4137222e-05, 6.326865e-05, 6.560672e-05, -3.4435136e-05, -0.00020439761, -0.00038277567, -0.00050169078, -0.00051321072, -0.00040916383, -0.00022633663, -3.4280285e-05, 9.0356094e-05, 9.3554132e-05, -3.375774e-05, -0.00024993313, -0.00047646323, -0.00062698068, -0.00064076134, -0.0005077864, -0.00027511595, -3.1168591e-05, 0.00012697959, 0.00013125192, -2.9363044e-05, -0.00030180588, -0.00058674259, -0.00077534199, -0.00079148868, -0.00062312384, -0.00032991587, -2.3165539e-05, 0.00017544457, 0.00018104287, -1.9530571e-05, -0.00035935148, -0.00071403885, -0.00094789651, -0.00096653175, -0.00075561862, -0.00039001124, -8.3391524e-06, 0.00023846656, 0.00024568854, -2.229729e-06, -0.00042178697, -0.00085886288, -0.0011459902, -0.0011672663, -0.00090582471, -0.00045456443, 1.5594438e-05, 0.00031927385, 0.00032847581, 2.4943689e-05, -0.00048822365, -0.001021907, -0.0013713446, -0.0013954616, -0.0010745126, -0.0005226396, 5.1354873e-05, 0.00042175793, 0.00043337329, 6.4862281e-05, -0.00055768265, -0.0012041788, -0.0016262706, -0.0016535034, -0.0012628186, -0.00059321913, 0.00010222439, 0.00055069797, 0.00056526525, 0.0001210111, -0.00062911207, -0.0014071929, -0.0019139813, -0.0019447166, -0.0014724592, -0.0006652216, 0.000172243, 0.00071210205, 0.00073030801, 0.00019771064, -0.00070140586, -0.0016332533, -0.0022390538, -0.0022738492, -0.00170605, -0.00073752151, 0.00026651524, 0.00091373979, 0.00093648722, 0.00030046978, -0.00077342428, -0.0018858816, -0.0026081426, -0.002647816, -0.0019675947, -0.00080896978, 0.00039170432, 0.0011659947, 0.0011945134, 0.00043655923, -0.00084401434, -0.0021704941, -0.0030311134, -0.0030768919, -0.0022632682, -0.00087841525, 0.00055685436, 0.0014832804, 0.0015193149, 0.00061597669, -0.00091203186, -0.00249552, -0.0035229409, -0.0035767129, -0.0026027306, -0.00094472594, 0.00077481417, 0.0018864942, 0.0019326373, 0.00085314142, -0.00097636244, -0.0028743537, -0.0041070431, -0.0041718176, -0.0030014606, -0.0010068103, 0.0010648322, 0.0024075033, 0.0024678248, 0.0011700384, -0.0010359429, -0.0033289813, -0.0048215399, -0.0049023367, -0.0034851879, -0.0010636384, 0.0014576032, 0.0030979207, 0.003179248, 0.0016024739, -0.0010897809, -0.0038972734, -0.0057319547, -0.0058377008, -0.0040990496, -0.0011142608, 0.0020059419, 0.004047838, 0.0041626273, 0.0022137144, -0.0011369745, -0.0046491767, -0.0069597685, -0.0071078092, -0.0049286587, -0.0011578267, 0.0028100389, 0.0054307161, 0.0056044147, 0.0031281062, -0.001176729, -0.0057277819, -0.0087560099, -0.0089847101, -0.006156249, -0.0011936012, 0.004087308, 0.0076299165, 0.0079237875, 0.0046297968, -0.0012083718, -0.0074753095, -0.011732499, -0.012145725, -0.0082463305, -0.0012209781, 0.0064168908, 0.011695353, 0.012301924, 0.0075435541, -0.0012313664, -0.010956896, -0.017863812, -0.0188652, -0.012827499, -0.0012394924, 0.012032075, 0.02190778, 0.023857702, 0.015692819, -0.0012453217, -0.021976136, -0.039003864, -0.044421017, -0.032392118, -0.0012488292, 0.045499094, 0.099628948, 0.1500944, 0.18584137, 0.19875, 0.18584137, 0.1500944, 0.099628948, 0.045499094, -0.0012488292, -0.032392118, -0.044421017, -0.039003864, -0.021976136, -0.0012453217, 0.015692819, 0.023857702, 0.02190778, 0.012032075, -0.0012394924, -0.012827499, -0.0188652, -0.017863812, -0.010956896, -0.0012313664, 0.0075435541, 0.012301924, 0.011695353, 0.0064168908, -0.0012209781, -0.0082463305, -0.012145725, -0.011732499, -0.0074753095, -0.0012083718, 0.0046297968, 0.0079237875, 0.0076299165, 0.004087308, -0.0011936012, -0.006156249, -0.0089847101, -0.0087560099, -0.0057277819, -0.001176729, 0.0031281062, 0.0056044147, 0.0054307161, 0.0028100389, -0.0011578267, -0.0049286587, -0.0071078092, -0.0069597685, -0.0046491767, -0.0011369745, 0.0022137144, 0.0041626273, 0.004047838, 0.0020059419, -0.0011142608, -0.0040990496, -0.0058377008, -0.0057319547, -0.0038972734, -0.0010897809, 0.0016024739, 0.003179248, 0.0030979207, 0.0014576032, -0.0010636384, -0.0034851879, -0.0049023367, -0.0048215399, -0.0033289813, -0.0010359429, 0.0011700384, 0.0024678248, 0.0024075033, 0.0010648322, -0.0010068103, -0.0030014606, -0.0041718176, -0.0041070431, -0.0028743537, -0.00097636244, 0.00085314142, 0.0019326373, 0.0018864942, 0.00077481417, -0.00094472594, -0.0026027306, -0.0035767129, -0.0035229409, -0.00249552, -0.00091203186, 0.00061597669, 0.0015193149, 0.0014832804, 0.00055685436, -0.00087841525, -0.0022632682, -0.0030768919, -0.0030311134, -0.0021704941, -0.00084401434, 0.00043655923, 0.0011945134, 0.0011659947, 0.00039170432, -0.00080896978, -0.0019675947, -0.002647816, -0.0026081426, -0.0018858816, -0.00077342428, 0.00030046978, 0.00093648722, 0.00091373979, 0.00026651524, -0.00073752151, -0.00170605, -0.0022738492, -0.0022390538, -0.0016332533, -0.00070140586, 0.00019771064, 0.00073030801, 0.00071210205, 0.000172243, -0.0006652216, -0.0014724592, -0.0019447166, -0.0019139813, -0.0014071929, -0.00062911207, 0.0001210111, 0.00056526525, 0.00055069797, 0.00010222439, -0.00059321913, -0.0012628186, -0.0016535034, -0.0016262706, -0.0012041788, -0.00055768265, 6.4862281e-05, 0.00043337329, 0.00042175793, 5.1354873e-05, -0.0005226396, -0.0010745126, -0.0013954616, -0.0013713446, -0.001021907, -0.00048822365, 2.4943689e-05, 0.00032847581, 0.00031927385, 1.5594438e-05, -0.00045456443, -0.00090582471, -0.0011672663, -0.0011459902, -0.00085886288, -0.00042178697, -2.229729e-06, 0.00024568854, 0.00023846656, -8.3391524e-06, -0.00039001124, -0.00075561862, -0.00096653175, -0.00094789651, -0.00071403885, -0.00035935148, -1.9530571e-05, 0.00018104287, 0.00017544457, -2.3165539e-05, -0.00032991587, -0.00062312384, -0.00079148868, -0.00077534199, -0.00058674259, -0.00030180588, -2.9363044e-05, 0.00013125192, 0.00012697959, -3.1168591e-05, -0.00027511595, -0.0005077864, -0.00064076134, -0.00062698068, -0.00047646323, -0.00024993313, -3.375774e-05, 9.3554132e-05, 9.0356094e-05, -3.4280285e-05, -0.00022633663, -0.00040916383, -0.00051321072, -0.00050169078, -0.00038277567, -0.00020439761, -3.4435136e-05, 6.560672e-05, 6.326865e-05, -3.4137222e-05, -0.00018417882, -0.00032684917, -0.00040782389, -0.00039846692, -0.00030527244, -0.00016573443, -3.2848995e-05, 4.5411663e-05, 4.3750562e-05, -3.2119558e-05, -0.00014910979, -0.00026041703, -0.00032363387, -0.00031634339, -0.00024351435, -0.0001343414, -3.0216939e-05, 3.1263364e-05, 3.0123192e-05, -2.9378725e-05, -0.0001214567, -0.00020938492, -0.00025966347, -0.0002543396, -0.00019699617, -0.00011047409, -2.7542865e-05, 2.1710524e-05, 2.0958978e-05, -2.6858059e-05, -0.0001014029, -0.00017318674, -0.00021488621, -0.00021142243, -0.00016512309, -9.4243442e-05, -2.5634379e-05, 1.5527503e-05, 1.5053518e-05, -2.530922e-05, -8.8987101e-05, -0.00015115608, -0.00018820037, -0.00018648176, -0.00014719651, -8.5616448e-05, -2.5117404e-05, 1.1691747e-05, 1.1403496e-05, -2.5306228e-05, -8.4105435e-05];
	let paddedFilter: ~[f32] = ~[0.0f32, ..3840] + filter + ~[0.0f32, ..3841];
	let filterFFTd: ~[complex::Complex32] = kissfft::FFT(asRe(paddedFilter));
	let pdata = rtlsdr::readAsync(devHandle);
	loop {
		// 8192-512 \pm 1 complex-typed samples
		let mut samples: ~[complex::Complex32] = ~[];
		loop {
			samples = samples + rtlsdr::dataToSamples(pdata.recv());
			if (samples.len() == (512*15)) {break};
		}
		// phase of complex numbers
		let phase: ~[f32] = samples.iter().transform(|&x| num::atan2(x.im, x.re)).collect();
		let dpdt: ~[f32] = phase.window_iter(2).transform(|x| {
			let mut dx = x[0]-x[1];
			if (dx < -pi) {dx = dx + 2f32*pi};
			if (dx > pi) {dx = dx - 2f32*pi};
			dx}
			).collect::<~[f32]>();
		videoChan.send(dpdt.clone());
		// 15 * 512 = 7679
		let paddedData = asRe(~[0.0f32, ..256]) + asRe(dpdt) + asRe(~[0.0f32, ..257]);
		// multiply DFT'd filter coefficients by DFT'd data - implement overlap-add fast convolution
		// - http://www.dspguide.com/ch12/1.htm
		// - https://en.wikipedia.org/wiki/Overlap%E2%80%93add_method
		// - http://www.cs.princeton.edu/courses/archive/spr05/cos423/lectures/05fft.pdf
		let datafft = kissfft::FFT(paddedData);
		let convolved: ~[complex::Complex32] = datafft.iter().zip(filterFFTd.iter()).transform(|(&x, &y)| {x*y}).collect();
		let filtered: ~[f32] = asF32(kissfft::iFFT(convolved));
		let trimmed: ~[f32] = filtered.iter().enumerate().filter(|&(x, &y)| (256<x)  && (x<=((8192/2)-256))).transform(|(x, &y)| y).collect();
		let downsampled: ~[f32] = trimmed.iter().enumerate().filter(|&(x, &y)| (x % 3) == 1).transform(|(x, &y)| y).collect();
		co.send(downsampled);
	}
}
